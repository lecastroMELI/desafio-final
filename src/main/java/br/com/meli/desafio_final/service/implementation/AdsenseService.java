package br.com.meli.desafio_final.service.implementation;

import br.com.meli.desafio_final.dto.AdsenseByWarehouseDto;
import br.com.meli.desafio_final.dto.AdsenseInsertDto;
import br.com.meli.desafio_final.dto.AdsenseUpdateDto;
import br.com.meli.desafio_final.exception.BadRequest;
import br.com.meli.desafio_final.exception.NotFound;
import br.com.meli.desafio_final.model.entity.Adsense;
import br.com.meli.desafio_final.model.entity.Product;
import br.com.meli.desafio_final.model.entity.Seller;
import br.com.meli.desafio_final.model.enums.Category;
import br.com.meli.desafio_final.repository.AdsenseRepository;
import br.com.meli.desafio_final.repository.SellerRepository;
import br.com.meli.desafio_final.service.IAdsenseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import br.com.meli.desafio_final.dto.AdsenseIdDto;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
public class AdsenseService implements IAdsenseService {

    @Autowired
    private AdsenseRepository adsenseRepository;

    @Autowired
    private BatchService batchService;

    @Autowired
    private ProductService productService;

    @Autowired
    private SellerRepository sellerRepository;

    /**
     * Nesse m√©todo estamos retornado/ consultando an√∫ncio Id
     * @param id
     */
    @Override
    public Adsense findById(long id) {
        return adsenseRepository.findById(id)
            .orElseThrow(() -> { throw new NotFound("üí¢ An√∫ncio n√£o cadastrado."); });
    }

    /**
     * Nesse m√©todo consultamos uma lista de an√∫ncios e retornamos lista caso existe,
     * caso n√£o exibimos uma mensagem de erro
     */
    @Override
    public List<Adsense> findAll() {
        List<Adsense> adsenses = adsenseRepository.findAll();

        if (adsenses.size() == 0) throw new NotFound("üí¢ Lista de an√∫ncios n√£o encontrada");

        return adsenses;
    }

    /**
     * Nesse m√©todo retornamos uma lista de an√∫ncio filtrado por categoria
     * @param category
     */
    @Override
    public List<Adsense> findByCategory(Category category) {
        List<Adsense> adsenseList = findAll()
            .stream()
            .filter(a -> a.getProduct().getCategory().equals(category))
            .collect(Collectors.toList());

        if (adsenseList.isEmpty()) throw new NotFound("üí¢ N√£o existem an√∫ncios com essa categoria");

        return adsenseList;
    }
    // TODO: Test caminho triste

    /**
     * Nesse m√©todo retornamos uma lista de an√∫ncio filtrado por produtos e Id
     * @param productId
     */
    @Override
    public List<AdsenseIdDto> findByProductId(Long productId) {
        List<Adsense> adsenseList = findAll()
            .stream()
            .filter(a -> a.getProduct().getId().equals(productId))
            .collect(Collectors.toList());

        return AdsenseIdDto.convertDto(adsenseList);
    }

    /**
     * Nesse m√©todo retornamos uma lista de an√∫ncio e quantidade por armaz√©m
     * @param adsenseId
     */
    @Override
    public List<AdsenseByWarehouseDto> findAdsenseByWarehouseAndQuantity(Long adsenseId) {
        return batchService.getAdsenseByWarehouseAndQuantity(adsenseId);
    }

    /**
     * M√©todo respons√°vel pela cria√ß√£o de um novo an√∫ncio.
     * Retorna alguns dados do an√∫ncio criado.
     * @param newAdsense Os dados do an√∫ncio informados na requis√ß√£o
     * @return AdsenseInsertDto
     * @author Let√≠cia Castro
     */
    @Override
    public AdsenseInsertDto insertAdsense(Adsense newAdsense) {
        if (newAdsense.getId() != null) {
            throw new BadRequest("‚ö†Ô∏è O an√∫ncio n√£o pode conter um ID.");
        }

        Product product = productService.findById(newAdsense.getProduct().getId());

        Seller seller = sellerRepository
            .findById(newAdsense.getSeller().getId())
            .orElseThrow(() -> { throw new NotFound("Seller n√£o cadastrado"); });

        adsenseRepository.save(newAdsense);

        return new AdsenseInsertDto(newAdsense, product, seller);
    }

    /**
     * M√©todo respons√°vel por atualizar um an√∫ncio espec√≠fico de um determinado vendedor.
     * Retorna alguns dados do an√∫ncio atualizado.
     * @param adsenseId O ID do an√∫ncio a ser pesquisado no banco.
     * @param sellerId O ID do vendedor.
     * @param adsense Os novos dados do an√∫ncio.
     * @return AdsenseUpdateDto
     * @author Let√≠cia Castro
     */
    @Override
    public AdsenseUpdateDto updateAdsenseById(Adsense adsense, Long adsenseId, Long sellerId) {
        Adsense adsenseFound = findById(adsenseId);

        if (!sellerId.equals(adsenseFound.getSeller().getId())) {
            throw new BadRequest("Vendendor n√£o √© o propriet√°rio deste an√∫ncio.");
        }

        Product product = productService.findById(adsense.getProduct().getId());

        adsenseFound.setProduct(adsense.getProduct());
        adsenseFound.setPrice(adsense.getPrice());

        adsenseRepository.save(adsenseFound);

        return new AdsenseUpdateDto(adsenseFound, product);
    }

    /**
     * M√©todo respons√°vel por apagar um an√∫ncio espec√≠fico.
     * @param id - ID do an√∫ncio
     * @author Let√≠cia Castro
     */
    @Override
    public void deleteAdsenseById(Long id) {
        Adsense adsense = findById(id);
        if (Objects.nonNull(adsense)) {
            adsenseRepository.deleteById(id);
        }
    }
}

// TODO : ADSENSE: MELHORIAS: UPDATE S√ì √â PERMITIDO SE N√ÉO HOUVE NENHUMA VENDA
// TODO : ADSENSE: MELHORIAS: DELETE S√ì SER PERMITIDO SE O SELLER FOR O PROPRIET√ÅRIO